{"version":3,"sources":["../src/utils/localSearch.ts","../src/utils/cloudSearch.ts","../src/hooks/useAISearch.ts","../src/hooks/useKeyboardNavigation.ts","../src/components/SearchResultItem.tsx","../src/components/SearchResults.tsx","../src/components/AISearch.tsx"],"names":["Fuse","useState","useCallback","useEffect","jsxs","jsx","useMemo"],"mappings":"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","file":"index.js","sourcesContent":["import Fuse from \"fuse.js\";\r\nimport { SearchResult } from \"../types\";\r\n\r\nconst fuseOptions = {\r\n  keys: [\"title\", \"description\"],\r\n  threshold: 0.3,\r\n  includeScore: true,\r\n};\r\n\r\nexport const performLocalSearch = (\r\n  data: SearchResult[],\r\n  query: string\r\n): SearchResult[] => {\r\n  if (!query.trim()) {\r\n    return [];\r\n  }\r\n\r\n  const fuse = new Fuse(data, fuseOptions);\r\n  const results = fuse.search(query);\r\n\r\n  // Return top 10 results\r\n  return results.slice(0, 10).map((result) => result.item);\r\n};\r\n","import { SearchResult } from \"../types\";\r\n\r\n// Mock embedding function for demonstration\r\n// In a real implementation, you would use the actual API\r\nconst mockEmbed = async (_text: string): Promise<number[]> => {\r\n  // This is a mock implementation\r\n  // In reality, you would call the OpenAI or Cohere API\r\n  return Array(1536)\r\n    .fill(0)\r\n    .map((_, _i) => Math.random() * 2 - 1);\r\n};\r\n\r\n// Simple cosine similarity function\r\nconst cosineSimilarity = (a: number[], b: number[]): number => {\r\n  // Validate that arrays have the same length\r\n  if (a.length !== b.length) {\r\n    throw new Error(\r\n      \"Arrays must have the same length for cosine similarity calculation\"\r\n    );\r\n  }\r\n\r\n  // Handle empty arrays\r\n  if (a.length === 0) {\r\n    return 0;\r\n  }\r\n\r\n  // Calculate dot product using a for loop with type assertion to avoid TypeScript issues\r\n  let dotProduct = 0;\r\n  for (let i = 0; i < a.length; i++) {\r\n    dotProduct += (a[i] as number) * (b[i] as number);\r\n  }\r\n\r\n  // Calculate magnitudes using for loops with type assertion\r\n  let magnitudeA = 0;\r\n  for (let i = 0; i < a.length; i++) {\r\n    magnitudeA += (a[i] as number) * (a[i] as number);\r\n  }\r\n  magnitudeA = Math.sqrt(magnitudeA);\r\n\r\n  let magnitudeB = 0;\r\n  for (let i = 0; i < b.length; i++) {\r\n    magnitudeB += (b[i] as number) * (b[i] as number);\r\n  }\r\n  magnitudeB = Math.sqrt(magnitudeB);\r\n\r\n  // Handle zero magnitude cases\r\n  if (magnitudeA === 0 || magnitudeB === 0) {\r\n    return 0;\r\n  }\r\n\r\n  return dotProduct / (magnitudeA * magnitudeB);\r\n};\r\n\r\nexport const performOpenAISearch = async (\r\n  data: SearchResult[],\r\n  query: string,\r\n  _apiKey: string\r\n): Promise<SearchResult[]> => {\r\n  if (!query.trim()) {\r\n    return [];\r\n  }\r\n\r\n  try {\r\n    // In a real implementation, you would use:\r\n    // const openai = new OpenAI({ apiKey });\r\n\r\n    // Mock implementation for demonstration\r\n    const queryEmbedding = await mockEmbed(query);\r\n\r\n    // Calculate similarity scores for all items\r\n    const scoredData = await Promise.all(\r\n      data.map(async (item) => {\r\n        const itemEmbedding = await mockEmbed(\r\n          item.title + \" \" + (item.description || \"\")\r\n        );\r\n        const similarity = cosineSimilarity(queryEmbedding, itemEmbedding);\r\n        return { ...item, similarity };\r\n      })\r\n    );\r\n\r\n    // Sort by similarity and return top 10\r\n    return scoredData.sort((a, b) => b.similarity - a.similarity).slice(0, 10);\r\n  } catch (error) {\r\n    console.error(\"OpenAI search error:\", error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const performCohereSearch = async (\r\n  data: SearchResult[],\r\n  query: string,\r\n  _apiKey: string\r\n): Promise<SearchResult[]> => {\r\n  if (!query.trim()) {\r\n    return [];\r\n  }\r\n\r\n  try {\r\n    // In a real implementation, you would use:\r\n    // const cohere = new CohereClient({ token: apiKey });\r\n\r\n    // Mock implementation for demonstration\r\n    const queryEmbedding = await mockEmbed(query);\r\n\r\n    // Calculate similarity scores for all items\r\n    const scoredData = await Promise.all(\r\n      data.map(async (item) => {\r\n        const itemEmbedding = await mockEmbed(\r\n          item.title + \" \" + (item.description || \"\")\r\n        );\r\n        const similarity = cosineSimilarity(queryEmbedding, itemEmbedding);\r\n        return { ...item, similarity };\r\n      })\r\n    );\r\n\r\n    // Sort by similarity and return top 10\r\n    return scoredData.sort((a, b) => b.similarity - a.similarity).slice(0, 10);\r\n  } catch (error) {\r\n    console.error(\"Cohere search error:\", error);\r\n    return [];\r\n  }\r\n};\r\n","import { useState, useEffect, useCallback } from \"react\";\r\nimport { SearchHookProps, SearchHookReturn, SearchResult } from \"../types\";\r\nimport { performLocalSearch } from \"../utils/localSearch\";\r\nimport { performOpenAISearch, performCohereSearch } from \"../utils/cloudSearch\";\r\n\r\nexport const useAISearch = ({\r\n  data,\r\n  apiKey,\r\n  searchType = \"local\",\r\n  cloudProvider = \"openai\",\r\n}: SearchHookProps): SearchHookReturn => {\r\n  const [query, setQuery] = useState(\"\");\r\n  const [results, setResults] = useState<SearchResult[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const search = useCallback(\r\n    async (searchQuery: string) => {\r\n      setQuery(searchQuery);\r\n\r\n      if (!searchQuery.trim()) {\r\n        setResults([]);\r\n        return;\r\n      }\r\n\r\n      setLoading(true);\r\n\r\n      try {\r\n        if (Array.isArray(data)) {\r\n          // Local search\r\n          if (searchType === \"local\") {\r\n            const localResults = performLocalSearch(data, searchQuery);\r\n            setResults(localResults);\r\n          }\r\n          // Cloud search\r\n          else if (searchType === \"cloud\" && apiKey) {\r\n            let cloudResults: SearchResult[] = [];\r\n\r\n            if (cloudProvider === \"openai\") {\r\n              cloudResults = await performOpenAISearch(\r\n                data,\r\n                searchQuery,\r\n                apiKey\r\n              );\r\n            } else if (cloudProvider === \"cohere\") {\r\n              cloudResults = await performCohereSearch(\r\n                data,\r\n                searchQuery,\r\n                apiKey\r\n              );\r\n            }\r\n\r\n            setResults(cloudResults);\r\n          } else {\r\n            // Fallback to local search if cloud is configured but no API key\r\n            const localResults = performLocalSearch(data, searchQuery);\r\n            setResults(localResults);\r\n          }\r\n        } else {\r\n          // API endpoint search (simplified for demonstration)\r\n          // In a real implementation, you would fetch from the API endpoint\r\n          console.warn(\"API endpoint search not implemented in this demo\");\r\n          setResults([]);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Search error:\", error);\r\n        setResults([]);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    },\r\n    [data, apiKey, searchType, cloudProvider]\r\n  );\r\n\r\n  // Debounced search effect\r\n  useEffect(() => {\r\n    const handler = setTimeout(() => {\r\n      if (query) {\r\n        search(query);\r\n      }\r\n    }, 300);\r\n\r\n    return () => {\r\n      clearTimeout(handler);\r\n    };\r\n  }, [query, search]);\r\n\r\n  return {\r\n    query,\r\n    results,\r\n    loading,\r\n    setQuery,\r\n    search,\r\n  };\r\n};\r\n","import { useState, useCallback } from \"react\";\r\nimport { SearchResult } from \"../types\";\r\n\r\nexport const useKeyboardNavigation = (results: SearchResult[]) => {\r\n  const [selectedIndex, setSelectedIndex] = useState(-1);\r\n\r\n  const handleKeyDown = useCallback(\r\n    (e: React.KeyboardEvent) => {\r\n      if (e.key === \"ArrowDown\") {\r\n        e.preventDefault();\r\n        setSelectedIndex((prev) => Math.min(prev + 1, results.length - 1));\r\n      } else if (e.key === \"ArrowUp\") {\r\n        e.preventDefault();\r\n        setSelectedIndex((prev) => Math.max(prev - 1, -1));\r\n      }\r\n    },\r\n    [results.length]\r\n  );\r\n\r\n  const resetSelection = useCallback(() => {\r\n    setSelectedIndex(-1);\r\n  }, []);\r\n\r\n  return {\r\n    selectedIndex,\r\n    handleKeyDown,\r\n    resetSelection,\r\n    setSelectedIndex,\r\n  };\r\n};\r\n","import React from 'react';\r\nimport { SearchResult } from '../types';\r\n\r\ninterface SearchResultItemProps {\r\n    result: SearchResult;\r\n    isSelected: boolean;\r\n    onClick: () => void;\r\n    highlight?: (text: string) => React.ReactNode;\r\n    className?: string | undefined;\r\n}\r\n\r\nexport const SearchResultItem: React.FC<SearchResultItemProps> = ({\r\n    result,\r\n    isSelected,\r\n    onClick,\r\n    highlight,\r\n    className\r\n}) => {\r\n    return (\r\n        <div\r\n            className={`search-result-item ${isSelected ? 'selected' : ''} ${className || ''}`}\r\n            onClick={onClick}\r\n            role=\"option\"\r\n            aria-selected={isSelected}\r\n        >\r\n            <h3>{highlight ? highlight(result.title) : result.title}</h3>\r\n            {result.description && (\r\n                <p>{highlight ? highlight(result.description) : result.description}</p>\r\n            )}\r\n            {result.url && (\r\n                <small>{result.url}</small>\r\n            )}\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport { SearchResult } from '../types';\r\nimport { SearchResultItem } from './SearchResultItem';\r\n\r\ninterface SearchResultsProps {\r\n    results: SearchResult[];\r\n    selectedIndex: number;\r\n    onSelect: (result: SearchResult) => void;\r\n    highlight: (text: string) => React.ReactNode;\r\n    containerClassName?: string | undefined;\r\n    itemClassName?: string | undefined;\r\n}\r\n\r\nexport const SearchResults: React.FC<SearchResultsProps> = ({\r\n    results,\r\n    selectedIndex,\r\n    onSelect,\r\n    highlight,\r\n    containerClassName,\r\n    itemClassName\r\n}) => {\r\n    if (results.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div className={`search-results ${containerClassName || ''}`} role=\"listbox\">\r\n            {results.map((result, index) => (\r\n                <SearchResultItem\r\n                    key={result.id}\r\n                    result={result}\r\n                    isSelected={index === selectedIndex}\r\n                    onClick={() => onSelect(result)}\r\n                    highlight={highlight}\r\n                    className={itemClassName || undefined}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n};","import React, { useMemo } from 'react';\r\nimport { SearchProps, SearchResult } from '../types';\r\nimport { useAISearch } from '../hooks/useAISearch';\r\nimport { useKeyboardNavigation } from '../hooks/useKeyboardNavigation';\r\nimport { SearchResults } from './SearchResults';\r\nimport './AISearch.css';\r\n\r\nexport const AISearch: React.FC<SearchProps> = ({\r\n    data,\r\n    apiKey,\r\n    searchType = 'local',\r\n    cloudProvider = 'openai',\r\n    placeholder = 'Search...',\r\n    onSelect,\r\n    renderItem,\r\n    containerClassName,\r\n    inputClassName,\r\n    resultsClassName,\r\n    resultItemClassName,\r\n    loadingClassName,\r\n    theme\r\n}) => {\r\n    // Generate CSS variables from theme prop\r\n    const themeStyle = useMemo(() => {\r\n        if (!theme) return {};\r\n        const style: Record<string, string> = {};\r\n        if (theme.primaryColor) style['--ai-search-primary-color'] = theme.primaryColor;\r\n        if (theme.secondaryColor) style['--ai-search-secondary-color'] = theme.secondaryColor;\r\n        if (theme.backgroundColor) style['--ai-search-background-color'] = theme.backgroundColor;\r\n        if (theme.borderColor) style['--ai-search-border-color'] = theme.borderColor;\r\n        if (theme.textColor) style['--ai-search-text-color'] = theme.textColor;\r\n        if (theme.borderRadius) style['--ai-search-border-radius'] = theme.borderRadius;\r\n        return style;\r\n    }, [theme]);\r\n\r\n    const {\r\n        query,\r\n        results,\r\n        loading,\r\n        setQuery\r\n    } = useAISearch({\r\n        data,\r\n        apiKey,\r\n        searchType,\r\n        cloudProvider\r\n    });\r\n\r\n    const {\r\n        selectedIndex,\r\n        handleKeyDown,\r\n        resetSelection\r\n    } = useKeyboardNavigation(results);\r\n\r\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = e.target.value;\r\n        setQuery(value);\r\n    };\r\n\r\n    const handleResultSelect = (result: SearchResult) => {\r\n        if (onSelect) {\r\n            onSelect(result);\r\n        }\r\n        setQuery('');\r\n        resetSelection();\r\n    };\r\n\r\n    const handleKeyDownInternal = (e: React.KeyboardEvent) => {\r\n        handleKeyDown(e);\r\n\r\n        if (e.key === 'Enter' && selectedIndex >= 0 && results[selectedIndex]) {\r\n            e.preventDefault();\r\n            handleResultSelect(results[selectedIndex]);\r\n        } else if (e.key === 'Escape') {\r\n            setQuery('');\r\n            resetSelection();\r\n        }\r\n    };\r\n\r\n    // Simple highlighting function\r\n    const highlight = useMemo(() => {\r\n        return (text: string) => {\r\n            if (!query) return text;\r\n\r\n            const regex = new RegExp(`(${query})`, 'gi');\r\n            const parts = text.split(regex);\r\n\r\n            return parts.map((part, index) =>\r\n                regex.test(part) ? <mark key={index}>{part}</mark> : part\r\n            );\r\n        };\r\n    }, [query]);\r\n\r\n    return (\r\n        <div\r\n            className={`ai-search-container ${containerClassName || ''}`}\r\n            style={themeStyle}\r\n        >\r\n            <input\r\n                type=\"text\"\r\n                value={query}\r\n                onChange={handleInputChange}\r\n                onKeyDown={handleKeyDownInternal}\r\n                placeholder={placeholder}\r\n                className={`ai-search-input ${inputClassName || ''}`}\r\n                aria-autocomplete=\"list\"\r\n                aria-controls=\"search-results\"\r\n                aria-expanded={results.length > 0}\r\n            />\r\n\r\n            {loading && (\r\n                <div className={`search-loading ${loadingClassName || ''}`}>Searching...</div>\r\n            )}\r\n\r\n            <SearchResults\r\n                results={results}\r\n                selectedIndex={selectedIndex}\r\n                onSelect={handleResultSelect}\r\n                highlight={highlight}\r\n                containerClassName={resultsClassName}\r\n                itemClassName={resultItemClassName}\r\n            />\r\n\r\n            {renderItem && results.length > 0 && (\r\n                <div className={`custom-results ${resultsClassName || ''}`}>\r\n                    {results.map((result, index) => (\r\n                        <div\r\n                            key={result.id}\r\n                            className={`${index === selectedIndex ? 'selected' : ''} ${resultItemClassName || ''}`}\r\n                            onClick={() => handleResultSelect(result)}\r\n                        >\r\n                            {renderItem(result)}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};"]}